{"version":3,"sources":["components/PageTitle.js","components/Login.js","pages/LoginPage.js","components/LoggedInName.js","components/AccessUI.js","pages/AccessColorsPage.js","App.js","serviceWorker.js","index.js"],"names":["PageTitle","id","Login","props","loginName","loginPassword","useState","message","setMessage","doLogin","event","a","async","preventDefault","js","value","fetch","method","body","headers","response","JSON","text","res","parse","user","firstName","lastName","localStorage","setItem","stringify","window","location","href","console","log","alert","toString","onSubmit","type","placeholder","ref","c","class","onClick","LoginPage","LoggedInName","user_data","retrievedObject","getItem","AccessUI","color","search","searchResults","setResults","colorList","setColorList","userId","undefined","txt","_results","results","resultText","i","length","error","AccessColorsPage","App","path","exact","to","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2QAUeA,MAPf,WAEI,OACI,wBAAIC,GAAG,SAAP,6B,uBCiDOC,MArDf,SAAeC,GAEX,IAAIC,EACAC,EAHc,EAKYC,mBAAS,IALrB,mBAKXC,EALW,KAKFC,EALE,KAOZC,EAAU,SAAMC,GAAN,qBAAAC,EAAAC,OAAA,uDACZF,EAAMG,iBAEFC,EAAK,aACHV,EAAUW,MACV,iBACAV,EAAcU,MAAQ,KANhB,oBAAAJ,EAAA,MASeK,MAAM,kCACzB,CAAEC,OAAQ,OAAQC,KAAMJ,EAAIK,QAAS,CAAE,eAAgB,uBAVnD,cASFC,EATE,YAYEC,KAZF,WAAAV,EAAA,MAYmBS,EAASE,QAZ5B,oBAYJC,EAZI,KAYOC,MAZP,iBAcAvB,IAAM,EACVO,EAAW,wCAGPiB,EAAO,CAAEC,UAAWH,EAAIG,UAAWC,SAAUJ,EAAII,SAAU1B,GAAIsB,EAAItB,IACvE2B,aAAaC,QAAQ,YAAaR,KAAKS,UAAUL,IAEjDjB,EAAW,IACXuB,OAAOC,SAASC,KAAO,WAtBnB,yDA0BRC,QAAQC,IAAI,KAAE5B,SACd6B,MAAM,KAAEC,YA3BA,6EAiChB,OACI,yBAAKpC,GAAG,YACJ,0BAAMqC,SAAU7B,GACZ,0BAAMR,GAAG,eAAT,iBACA,2BAAOsC,KAAK,OAAOtC,GAAG,YAAYuC,YAAY,WAAWC,IAAK,SAACC,GAAD,OAAOtC,EAAYsC,KAAK,6BACtF,2BAAOH,KAAK,WAAWtC,GAAG,gBAAgBuC,YAAY,WAAWC,IAAK,SAACC,GAAD,OAAOrC,EAAgBqC,KAAK,6BAClG,2BAAOH,KAAK,SAAStC,GAAG,cAAc0C,MAAM,UAAU5B,MAAM,QAAQ6B,QAASnC,KAEjF,0BAAMR,GAAG,eAAeM,KClCrBsC,EAXG,SAAC1C,GAGf,OACI,6BACI,kBAAC,EAAD,MACA,kBAAC,EAAD,QCmBG2C,MA3Bf,SAAsB3C,GAGlB,IAAIsB,EAAK,GAGT,GAAIG,aAAamB,UACjB,CACI,IAAIC,EAAkBpB,aAAaqB,QAAQ,aAE3CxB,EADYJ,KAAKG,MAAMwB,GAU3B,OACI,yBAAK/C,GAAG,eACJ,0BAAMA,GAAG,YAAT,gBAAkCwB,EAAKC,UAAvC,IAAmDD,EAAKE,SAAxD,KAAyE,6BAC5E,4BAAQY,KAAK,SAAStC,GAAG,eAAe0C,MAAM,UAAUC,QAT5C,SAAAlC,GAEhBA,EAAMG,iBACHkB,OAAOC,SAASC,KAAO,MAMtB,eCyEMiB,MAhGf,SAAkB/C,GAGd,IAAIgD,EAAQ,GACRC,EAAS,GAHjB,EAKiC9C,mBAAS,IAL1C,mBAKWC,EALX,KAKmBC,EALnB,OAMuCF,mBAAS,IANhD,mBAMW+C,EANX,KAMyBC,EANzB,OAOqChD,mBAAS,IAP9C,mBAOWiD,EAPX,KAOqBC,EAPrB,KASQC,EAAStD,EAAMsD,OAqEnB,YApEeC,IAAXD,IAEAA,EAAS,GAmET,yBAAKxD,GAAG,eACJ,6BAEA,2BAAOsC,KAAK,OAAOtC,GAAG,aAAauC,YAAY,sBAAsBC,IAAK,SAACC,GAAD,OAAOU,EAASV,KAC1F,4BAAQH,KAAK,SAAStC,GAAG,oBAAoB0C,MAAM,UAAUC,QAvCjD,SAAMlC,GAAN,2BAAAC,EAAAC,OAAA,uDAEhBF,EAAMG,iBAEFC,EAAK,cAAc2C,EAAO,eAAeL,EAAOrC,MAAM,KAJ1C,oBAAAJ,EAAA,MAQWK,MAAM,yCAC7B,CAACC,OAAO,OAAOC,KAAKJ,EAAGK,QAAQ,CAAC,eAAgB,uBATpC,cAQNC,EARM,kBAAAT,EAAA,MAWIS,EAASE,QAXb,OAeZ,IAJIqC,EAXQ,OAYRpC,EAAMF,KAAKG,MAAMmC,GACjBC,EAAWrC,EAAIsC,QACfC,EAAa,GACRC,EAAE,EAAGA,EAAEH,EAASI,OAAQD,IAE7BD,GAAcF,EAASG,GACnBA,EAAIH,EAASI,OAAS,IAEtBF,GAAc,MAGtBR,EAAW,+BACXE,EAAaM,GAxBD,kDA4BZ1B,MAAM,KAAEC,YACRiB,EAAW,KAAEjB,YA7BD,2DAuCZ,kBAA0G,6BAC1G,0BAAMpC,GAAG,qBAAqBoD,GAC9B,uBAAGpD,GAAG,aAAasD,GAAc,6BAAM,6BAEvC,2BAAOhB,KAAK,OAAOtC,GAAG,YAAYuC,YAAY,eAAeC,IAAK,SAACC,GAAD,OAAOS,EAAQT,KACjF,4BAAQH,KAAK,SAAStC,GAAG,iBAAiB0C,MAAM,UAAUC,QAzEjD,SAAMlC,GAAN,qBAAAC,EAAAC,OAAA,uDAEhBF,EAAMG,iBAECC,EAAK,cAAc2C,EAAO,cAAcN,EAAMpC,MAAM,KAJ3C,oBAAAJ,EAAA,MAQcK,MAAM,qCAC7B,CAACC,OAAO,OAAOC,KAAKJ,EAAGK,QAAQ,CAAC,eAAgB,uBATvC,cAQHC,EARG,kBAAAT,EAAA,MAWOS,EAASE,QAXhB,OAWLqC,EAXK,QAYLpC,EAAMF,KAAKG,MAAMmC,IAEbM,MAAMD,OAAS,EAEnBxD,EAAY,aAAee,EAAI0C,OAI/BzD,EAAW,wBApBN,kDAyBTA,EAAW,KAAE6B,YAzBJ,2DAyET,eAAiG,6BACjG,0BAAMpC,GAAG,kBAAkBM,KC3ExB2D,EAXU,WAErB,OACI,6BACI,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,Q,YCeGC,MAlBf,WAGE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,GACnB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOD,KAAK,UAAUC,OAAK,GACzB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAUC,GAAG,SCTDC,QACW,cAA7BxC,OAAOC,SAASwC,UAEe,UAA7BzC,OAAOC,SAASwC,UAEhBzC,OAAOC,SAASwC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c544a009.chunk.js","sourcesContent":["import React from 'react';\n\n\nfunction PageTitle()\n{\n    return(\n        <h1 id=\"title\">COP 4331 LAMP Stack Demo</h1>\n    );\n};\n\nexport default PageTitle;\n","import React, { useState } from 'react';\n\nfunction Login(props) {\n\n    var loginName;\n    var loginPassword;\n\n    const [message, setMessage] = useState('');\n\n    const doLogin = async event => {\n        event.preventDefault();\n\n        var js = '{\"login\":\"'\n            + loginName.value\n            + '\",\"password\":\"'\n            + loginPassword.value + '\"}';\n\n        try {\n            const response = await fetch('http://localhost:5000/api/login',\n                { method: 'POST', body: js, headers: { 'Content-Type': 'application/json' } });\n\n            var res = JSON.parse(await response.text());\n\n            if (res.id <= 0) {\n                setMessage('User/Password combination incorrect');\n            }\n            else {\n                var user = { firstName: res.firstName, lastName: res.lastName, id: res.id }\n                localStorage.setItem('user_data', JSON.stringify(user));\n\n                setMessage('');\n                window.location.href = '/access';\n            }\n        }\n        catch (e) {\n            console.log(e.message)\n            alert(e.toString());\n            return;\n        }\n\n    };\n\n    return (\n        <div id=\"loginDiv\">\n            <form onSubmit={doLogin}>\n                <span id=\"inner-title\">PLEASE LOG IN</span>\n                <input type=\"text\" id=\"loginName\" placeholder=\"Username\" ref={(c) => loginName = c} /><br />\n                <input type=\"password\" id=\"loginPassword\" placeholder=\"Password\" ref={(c) => loginPassword = c} /><br />\n                <input type=\"submit\" id=\"loginButton\" class=\"buttons\" value=\"Do It\" onClick={doLogin} />\n            </form>\n            <span id=\"loginResult\">{message}</span>\n        </div>\n    );\n};\n\nexport default Login;\n","import React from 'react';\n\nimport PageTitle from '../components/PageTitle';\nimport Login from '../components/Login';\n\nconst LoginPage = (props) =>\n{\n\n    return(\n        <div>\n            <PageTitle />\n            <Login />\n        </div>\n    );\n};\n\nexport default LoginPage;\n","import React from 'react';\n\n//const LoggedInName = props =>\nfunction LoggedInName(props)\n{\n\n    var user={}\n\n    // Check for user\n    if (localStorage.user_data) \n    {\n        var retrievedObject = localStorage.getItem('user_data');\n        var _user = JSON.parse(retrievedObject);\n        user = _user\n    }\n  \n    const doLogout = event => \n    {\n\t    event.preventDefault();\n        window.location.href = '/';\n    };    \n\n    return(\n        <div id=\"loggedInDiv\">\n            <span id=\"userName\">Logged In As {user.firstName} {user.lastName} </span><br />\n\t        <button type=\"button\" id=\"logoutButton\" class=\"buttons\" onClick={doLogout}> Log Out </button>\n        </div>\n    );\n};\n\nexport default LoggedInName;\n","import React, { useState } from 'react';\n\nfunction AccessUI(props)\n{\n\n    var color = '';\n    var search = '';\n\n    const [message,setMessage] = useState('');\n    const [searchResults,setResults] = useState('');\n    const [colorList,setColorList] = useState('');\n\n    var userId = props.userId;\n    if( userId === undefined )\n    {\n        userId = 1;\n    }\n\n    const addColor = async event => \n    {\n\t    event.preventDefault();\n\n        var js = '{\"userId\":\"'+userId+'\",\"color\":\"'+color.value+'\"}';\n\n        try\n        {\n            const response = await fetch('http://localhost:5000/api/addColor',\n            {method:'POST',body:js,headers:{'Content-Type': 'application/json'}});\n\n            var txt = await response.text();\n            var res = JSON.parse(txt);\n\n            if( res.error.length > 0 )\n            {\n                setMessage( \"API Error:\" + res.error );\n            }\n            else\n            {\n                setMessage('Color has been added');\n            }\n        }\n        catch(e)\n        {\n            setMessage(e.toString());\n        }\n    };\n\n    const searchColor = async event => \n    {\n        event.preventDefault();\n        \n        var js = '{\"userId\":\"'+userId+'\",\"search\":\"'+search.value+'\"}';\n\n        try\n        {\n            const response = await fetch('http://localhost:5000/api/searchColors',\n            {method:'POST',body:js,headers:{'Content-Type': 'application/json'}});\n\n            var txt = await response.text();\n            var res = JSON.parse(txt);\n            var _results = res.results;\n            var resultText = '';\n            for( var i=0; i<_results.length; i++ )\n            {\n                resultText += _results[i];\n                if( i < _results.length - 1 )\n                {\n                    resultText += ', ';\n                }\n            }\n            setResults('Color(s) has been retrieved');\n            setColorList(resultText);\n        }\n        catch(e)\n        {\n            alert(e.toString());\n            setResults(e.toString());\n        }\n\n    };\n\n    return(\n        <div id=\"accessUIDiv\">\n            <br />\n\n            <input type=\"text\" id=\"searchText\" placeholder=\"Color To Search For\" ref={(c) => search = c} />\n            <button type=\"button\" id=\"searchColorButton\" class=\"buttons\" onClick={searchColor}> Search Color </button><br />\n            <span id=\"colorSearchResult\">{searchResults}</span>\n            <p id=\"colorList\">{colorList}</p><br /><br />\n\n            <input type=\"text\" id=\"colorText\" placeholder=\"Color To Add\" ref={(c) => color = c} />\n            <button type=\"button\" id=\"addColorButton\" class=\"buttons\" onClick={addColor}> Add Color </button><br />\n            <span id=\"colorAddResult\">{message}</span>\n\n        </div>\n    );\n}\n\nexport default AccessUI;\n","import React from 'react';\n\nimport PageTitle from '../components/PageTitle';\nimport LoggedInName from '../components/LoggedInName';\nimport AccessUI from '../components/AccessUI';\n\nconst AccessColorsPage = () =>\n{\n    return(\n        <div>\n            <PageTitle />\n            <LoggedInName />\n            <AccessUI />\n        </div>\n    );\n}\n\nexport default AccessColorsPage;\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Redirect, Switch } from 'react-router-dom';\n\nimport LoginPage from './pages/LoginPage';\nimport AccessColorsPage from './pages/AccessColorsPage';\n\nimport './App.css';\nimport './styles.css'\n\nfunction App() \n{\n\n  return (\n    <Router >\n      <Switch>\n        <Route path=\"/\" exact>\n          <LoginPage />\n        </Route>\n        <Route path=\"/access\" exact>\n          <AccessColorsPage />\n        </Route>\n        <Redirect to=\"/\" />\n      </Switch>  \n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}